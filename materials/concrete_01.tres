[gd_resource type="ShaderMaterial" load_steps=7 format=2]

[ext_resource path="res://textures/128px_concrete_01_BW.png" type="Texture" id=1]

[sub_resource type="VisualShaderNodeTexture" id=1]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeColorConstant" id=2]
output_port_for_preview = 0
constant = Color( 0.178981, 0.22814, 0.280469, 1 )

[sub_resource type="VisualShaderNodeColorOp" id=3]
operator = 4

[sub_resource type="VisualShaderNodeScalarOp" id=4]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 2.0 ]

[sub_resource type="VisualShader" id=5]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D tex_frg_2;



void vertex() {
// Output:0

}

void fragment() {
// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, UV.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Color:4
	vec3 n_out4p0 = vec3(0.178981, 0.228140, 0.280469);
	float n_out4p1 = 1.000000;

// ColorOp:5
	vec3 n_out5p0;
	{
		float base = n_out2p0.x;
		float blend = n_out4p0.x;
		if (base < 0.5) {
			n_out5p0.x = 2.0 * base * blend;
		} else {
			n_out5p0.x = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out2p0.y;
		float blend = n_out4p0.y;
		if (base < 0.5) {
			n_out5p0.y = 2.0 * base * blend;
		} else {
			n_out5p0.y = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out2p0.z;
		float blend = n_out4p0.z;
		if (base < 0.5) {
			n_out5p0.z = 2.0 * base * blend;
		} else {
			n_out5p0.z = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}

// Output:0
	ALBEDO = n_out5p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -489.367, 9.20001 )
nodes/fragment/0/position = Vector2( 300, 60 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -460, 240 )
nodes/fragment/4/node = SubResource( 2 )
nodes/fragment/4/position = Vector2( -180, 420 )
nodes/fragment/5/node = SubResource( 3 )
nodes/fragment/5/position = Vector2( 40, 180 )
nodes/fragment/8/node = SubResource( 4 )
nodes/fragment/8/position = Vector2( -200, 60 )
nodes/fragment/connections = PoolIntArray( 4, 0, 5, 1, 5, 0, 0, 0, 2, 0, 8, 0, 2, 0, 5, 0 )

[resource]
shader = SubResource( 5 )
