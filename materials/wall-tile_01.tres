[gd_resource type="ShaderMaterial" load_steps=11 format=2]

[ext_resource path="res://textures/128px_floor_tiles_04_NM.png" type="Texture" id=1]
[ext_resource path="res://textures/128px_floor_tiles_04_DF.png" type="Texture" id=2]
[ext_resource path="res://textures/128px_metal-scratch_BW.png" type="Texture" id=3]

[sub_resource type="VisualShaderNodeTexture" id=1]
texture = ExtResource( 3 )

[sub_resource type="VisualShaderNodeScalarOp" id=2]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.1 ]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id=3]
texture = ExtResource( 2 )

[sub_resource type="VisualShaderNodeColorConstant" id=4]
output_port_for_preview = 0
constant = Color( 0, 0, 0, 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=5]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.5 ]
operator = 1

[sub_resource type="VisualShaderNodeTexture" id=6]
texture = ExtResource( 1 )

[sub_resource type="VisualShader" id=7]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D tex_frg_2;
uniform sampler2D tex_frg_10;
uniform sampler2D tex_frg_9;



void vertex() {
// Output:0

}

void fragment() {
// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, UV.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Texture:10
	vec4 tex_frg_10_read = texture(tex_frg_10, UV.xy);
	vec3 n_out10p0 = tex_frg_10_read.rgb;
	float n_out10p1 = tex_frg_10_read.a;

// ScalarOp:11
	float n_in11p1 = 0.10000;
	float n_out11p0 = dot(n_out10p0, vec3(0.333333, 0.333333, 0.333333)) * n_in11p1;

// ScalarOp:8
	float n_out8p0 = dot(n_out2p0, vec3(0.333333, 0.333333, 0.333333)) - n_out11p0;

// Color:4
	vec3 n_out4p0 = vec3(0.000000, 0.000000, 0.000000);
	float n_out4p1 = 1.000000;

// Texture:9
	vec4 tex_frg_9_read = texture(tex_frg_9, UV.xy);
	vec3 n_out9p0 = tex_frg_9_read.rgb;
	float n_out9p1 = tex_frg_9_read.a;

// Output:0
	ALBEDO = vec3(n_out8p0);
	ROUGHNESS = dot(n_out4p0, vec3(0.333333, 0.333333, 0.333333));
	NORMAL = n_out9p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -435, -34.5 )
nodes/fragment/0/position = Vector2( 300, 60 )
nodes/fragment/2/node = SubResource( 3 )
nodes/fragment/2/position = Vector2( -720, 100 )
nodes/fragment/4/node = SubResource( 4 )
nodes/fragment/4/position = Vector2( -260, 460 )
nodes/fragment/8/node = SubResource( 5 )
nodes/fragment/8/position = Vector2( -160, 100 )
nodes/fragment/9/node = SubResource( 6 )
nodes/fragment/9/position = Vector2( 0, 400 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -720, 320 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -400, 240 )
nodes/fragment/connections = PoolIntArray( 9, 0, 0, 7, 2, 0, 8, 0, 10, 0, 11, 0, 11, 0, 8, 1, 8, 0, 0, 0, 4, 0, 0, 3 )

[resource]
shader = SubResource( 7 )
