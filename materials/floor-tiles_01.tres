[gd_resource type="ShaderMaterial" load_steps=17 format=2]

[ext_resource path="res://textures/128px_floor_tiles_01_BW.png" type="Texture" id=1]
[ext_resource path="res://textures/128px_cloud_01_BW.png" type="Texture" id=2]
[ext_resource path="res://textures/128px_floor_tiles_01_DF.png" type="Texture" id=3]
[ext_resource path="res://textures/128px_floor_tiles_01_NM.png" type="Texture" id=4]

[sub_resource type="VisualShaderNodeColorConstant" id=1]
output_port_for_preview = 0
constant = Color( 0.119629, 0.303177, 0.375, 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=2]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeTexture" id=3]
texture = ExtResource( 3 )
texture_type = 1

[sub_resource type="VisualShaderNodeColorOp" id=4]
output_port_for_preview = 0
operator = 4

[sub_resource type="VisualShaderNodeScalarOp" id=5]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.9 ]

[sub_resource type="VisualShaderNodeScalarOp" id=6]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.2 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=7]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeTexture" id=8]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=9]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeTexture" id=10]
texture = ExtResource( 2 )

[sub_resource type="VisualShaderNodeTexture" id=11]
texture = ExtResource( 4 )

[sub_resource type="VisualShader" id=12]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D tex_frg_2;
uniform sampler2D tex_frg_13 : hint_albedo;
uniform sampler2D tex_frg_7;
uniform sampler2D tex_frg_8;



void vertex() {
// Output:0

}

void fragment() {
// Color:10
	vec3 n_out10p0 = vec3(0.119629, 0.303177, 0.375000);
	float n_out10p1 = 1.000000;

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, UV.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Texture:13
	vec4 tex_frg_13_read = texture(tex_frg_13, UV.xy);
	vec3 n_out13p0 = tex_frg_13_read.rgb;
	float n_out13p1 = tex_frg_13_read.a;

// ScalarOp:15
	float n_in15p1 = 0.90000;
	float n_out15p0 = dot(n_out13p0, vec3(0.333333, 0.333333, 0.333333)) + n_in15p1;

// ScalarOp:16
	float n_in16p1 = 0.20000;
	float n_out16p0 = n_out15p0 * n_in16p1;

// ScalarOp:12
	float n_out12p0 = dot(n_out2p0, vec3(0.333333, 0.333333, 0.333333)) * n_out16p0;

// Texture:7
	vec4 tex_frg_7_read = texture(tex_frg_7, UV.xy);
	vec3 n_out7p0 = tex_frg_7_read.rgb;
	float n_out7p1 = tex_frg_7_read.a;

// ScalarOp:6
	float n_out6p0 = n_out12p0 * dot(n_out7p0, vec3(0.333333, 0.333333, 0.333333));

// ColorOp:14
	vec3 n_out14p0;
	{
		float base = n_out10p0.x;
		float blend = vec3(n_out6p0).x;
		if (base < 0.5) {
			n_out14p0.x = 2.0 * base * blend;
		} else {
			n_out14p0.x = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out10p0.y;
		float blend = vec3(n_out6p0).y;
		if (base < 0.5) {
			n_out14p0.y = 2.0 * base * blend;
		} else {
			n_out14p0.y = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out10p0.z;
		float blend = vec3(n_out6p0).z;
		if (base < 0.5) {
			n_out14p0.z = 2.0 * base * blend;
		} else {
			n_out14p0.z = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}

// ScalarOp:17
	float n_out17p0 = dot(n_out2p0, vec3(0.333333, 0.333333, 0.333333)) * dot(n_out7p0, vec3(0.333333, 0.333333, 0.333333));

// Texture:8
	vec4 tex_frg_8_read = texture(tex_frg_8, UV.xy);
	vec3 n_out8p0 = tex_frg_8_read.rgb;
	float n_out8p1 = tex_frg_8_read.a;

// Output:0
	ALBEDO = n_out14p0;
	ROUGHNESS = n_out6p0;
	SPECULAR = n_out17p0;
	NORMAL = n_out8p0;

}

void light() {
// Output:0

}
"
nodes/fragment/0/position = Vector2( 900, 160 )
nodes/fragment/2/node = SubResource( 8 )
nodes/fragment/2/position = Vector2( -620, -120 )
nodes/fragment/6/node = SubResource( 9 )
nodes/fragment/6/position = Vector2( -60, 0 )
nodes/fragment/7/node = SubResource( 10 )
nodes/fragment/7/position = Vector2( -280, 200 )
nodes/fragment/8/node = SubResource( 11 )
nodes/fragment/8/position = Vector2( 200, 500 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 160, 160 )
nodes/fragment/12/node = SubResource( 2 )
nodes/fragment/12/position = Vector2( -300, -120 )
nodes/fragment/13/node = SubResource( 3 )
nodes/fragment/13/position = Vector2( -1020, 240 )
nodes/fragment/14/node = SubResource( 4 )
nodes/fragment/14/position = Vector2( 340, 60 )
nodes/fragment/15/node = SubResource( 5 )
nodes/fragment/15/position = Vector2( -760, 240 )
nodes/fragment/16/node = SubResource( 6 )
nodes/fragment/16/position = Vector2( -540, 220 )
nodes/fragment/17/node = SubResource( 7 )
nodes/fragment/17/position = Vector2( 140, -200 )
nodes/fragment/connections = PoolIntArray( 8, 0, 0, 7, 2, 0, 12, 0, 6, 0, 14, 1, 10, 0, 14, 0, 14, 0, 0, 0, 12, 0, 6, 0, 7, 0, 6, 1, 13, 0, 15, 0, 15, 0, 16, 0, 16, 0, 12, 1, 2, 0, 17, 0, 7, 0, 17, 1, 17, 0, 0, 4, 6, 0, 0, 3 )

[resource]
shader = SubResource( 12 )
