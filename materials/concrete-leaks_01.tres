[gd_resource type="ShaderMaterial" load_steps=11 format=2]

[ext_resource path="res://textures/128px_concrete_01_BW.png" type="Texture" id=1]
[ext_resource path="res://textures/128px_leaks_01_BW.png" type="Texture" id=2]

[sub_resource type="VisualShaderNodeTexture" id=1]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeColorOp" id=2]
operator = 4

[sub_resource type="VisualShaderNodeColorConstant" id=3]
output_port_for_preview = 0
constant = Color( 0.455017, 0.499511, 0.546875, 1 )

[sub_resource type="VisualShaderNodeTexture" id=5]
texture = ExtResource( 2 )

[sub_resource type="VisualShaderNodeColorOp" id=6]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=7]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "front_facing"

[sub_resource type="VisualShader" id=4]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D tex_frg_2;
uniform sampler2D tex_frg_5;



void vertex() {
// Output:0

}

void fragment() {
// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, UV.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Input:8
	bool n_out8p0 = FRONT_FACING;

// Texture:5
	vec4 tex_frg_5_read = texture(tex_frg_5, vec3(n_out8p0 ? 1.0 : 0.0).xy);
	vec3 n_out5p0 = tex_frg_5_read.rgb;
	float n_out5p1 = tex_frg_5_read.a;

// ScalarOp:7
	float n_out7p0 = dot(n_out2p0, vec3(0.333333, 0.333333, 0.333333)) * dot(n_out5p0, vec3(0.333333, 0.333333, 0.333333));

// Color:4
	vec3 n_out4p0 = vec3(0.455017, 0.499511, 0.546875);
	float n_out4p1 = 1.000000;

// ColorOp:3
	vec3 n_out3p0;
	{
		float base = vec3(n_out7p0).x;
		float blend = n_out4p0.x;
		if (base < 0.5) {
			n_out3p0.x = 2.0 * base * blend;
		} else {
			n_out3p0.x = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = vec3(n_out7p0).y;
		float blend = n_out4p0.y;
		if (base < 0.5) {
			n_out3p0.y = 2.0 * base * blend;
		} else {
			n_out3p0.y = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = vec3(n_out7p0).z;
		float blend = n_out4p0.z;
		if (base < 0.5) {
			n_out3p0.z = 2.0 * base * blend;
		} else {
			n_out3p0.z = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}

// Output:0
	ALBEDO = n_out3p0;
	SPECULAR = dot(n_out2p0, vec3(0.333333, 0.333333, 0.333333));

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -643, -233 )
nodes/fragment/0/position = Vector2( 640, 20 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -340, 60 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( 400, 20 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( 80, 320 )
nodes/fragment/5/node = SubResource( 5 )
nodes/fragment/5/position = Vector2( -340, -180 )
nodes/fragment/6/node = SubResource( 6 )
nodes/fragment/6/position = Vector2( -60, -40 )
nodes/fragment/7/node = SubResource( 7 )
nodes/fragment/7/position = Vector2( 100, -200 )
nodes/fragment/8/node = SubResource( 8 )
nodes/fragment/8/position = Vector2( -640, -20 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 4, 5, 0, 6, 1, 2, 0, 6, 0, 2, 0, 7, 0, 5, 0, 7, 1, 3, 0, 0, 0, 4, 0, 3, 1, 7, 0, 3, 0, 8, 0, 5, 0 )

[resource]
shader = SubResource( 4 )
