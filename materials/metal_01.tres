[gd_resource type="ShaderMaterial" load_steps=15 format=2]

[ext_resource path="res://textures/128px_metal-scratch_NM.png" type="Texture" id=1]
[ext_resource path="res://textures/128px_metal-brushed_01_BW.png" type="Texture" id=2]
[ext_resource path="res://textures/128px_metal-scratch_BW.png" type="Texture" id=3]

[sub_resource type="VisualShaderNodeTexture" id=1]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeColorOp" id=2]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeTexture" id=3]
texture = ExtResource( 3 )

[sub_resource type="VisualShaderNodeScalarOp" id=4]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 1.0 ]

[sub_resource type="VisualShaderNodeColorOp" id=5]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.2, 0.2, 0.2 ) ]

[sub_resource type="VisualShaderNodeTexture" id=6]
texture = ExtResource( 2 )

[sub_resource type="VisualShaderNodeColorConstant" id=7]
output_port_for_preview = 0
constant = Color( 0.301338, 0.53927, 0.607422, 1 )

[sub_resource type="VisualShaderNodeColorOp" id=8]
output_port_for_preview = 0
operator = 4

[sub_resource type="VisualShaderNodeScalarOp" id=9]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.6 ]

[sub_resource type="VisualShaderNodeColorConstant" id=10]
output_port_for_preview = 0
constant = Color( 0.0253906, 0.0253906, 0.0253906, 1 )

[sub_resource type="VisualShader" id=11]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D tex_frg_2;



void vertex() {
// Output:0

}

void fragment() {
// Color:4
	vec3 n_out4p0 = vec3(0.301338, 0.539270, 0.607422);
	float n_out4p1 = 1.000000;

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, UV.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// ScalarOp:8
	float n_in8p1 = 0.60000;
	float n_out8p0 = dot(n_out2p0, vec3(0.333333, 0.333333, 0.333333)) + n_in8p1;

// ColorOp:11
	vec3 n_in11p1 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out11p0 = vec3(1.0) - (vec3(1.0) - vec3(n_out8p0)) * (vec3(1.0) - n_in11p1);

// ColorOp:5
	vec3 n_out5p0;
	{
		float base = n_out4p0.x;
		float blend = n_out11p0.x;
		if (base < 0.5) {
			n_out5p0.x = 2.0 * base * blend;
		} else {
			n_out5p0.x = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out4p0.y;
		float blend = n_out11p0.y;
		if (base < 0.5) {
			n_out5p0.y = 2.0 * base * blend;
		} else {
			n_out5p0.y = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out4p0.z;
		float blend = n_out11p0.z;
		if (base < 0.5) {
			n_out5p0.z = 2.0 * base * blend;
		} else {
			n_out5p0.z = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}

// Color:9
	vec3 n_out9p0 = vec3(0.025391, 0.025391, 0.025391);
	float n_out9p1 = 1.000000;

// Output:0
	ALBEDO = n_out5p0;
	ROUGHNESS = dot(n_out9p0, vec3(0.333333, 0.333333, 0.333333));

}

void light() {
// Output:0

}
"
nodes/fragment/0/position = Vector2( 300, 60 )
nodes/fragment/2/node = SubResource( 6 )
nodes/fragment/2/position = Vector2( -1160, 80 )
nodes/fragment/4/node = SubResource( 7 )
nodes/fragment/4/position = Vector2( -240, 400 )
nodes/fragment/5/node = SubResource( 8 )
nodes/fragment/5/position = Vector2( 20, 0 )
nodes/fragment/8/node = SubResource( 9 )
nodes/fragment/8/position = Vector2( -920, 80 )
nodes/fragment/9/node = SubResource( 10 )
nodes/fragment/9/position = Vector2( -40, 340 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -560, 500 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -540, 80 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( -1160, 320 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( -820, 280 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( 20, 520 )
nodes/fragment/connections = PoolIntArray( 5, 0, 0, 0, 2, 0, 8, 0, 4, 0, 5, 0, 9, 0, 0, 3, 8, 0, 11, 0, 11, 0, 5, 1, 12, 0, 13, 0, 10, 0, 14, 0 )

[resource]
shader = SubResource( 11 )
